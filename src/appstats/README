AppStats is a Python library for use with Google App Engine to
instrument RPC calls.  This is an open source pre-release.
Installation instructions follow after the copyright notice.


Copyright 2009 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Installation instructions:

(0) If you're using this with the Google App Engine SDK, you *must*
    use SDK 1.2.8 or newer.

(1) Drop this directory into your app.

(2) To configure event recording:

     - Check that you're using webapp.util.run_wsgi_app() everywhere
       to invoke your application object.  If you're not, you're
       probably invoking your app using something like
       "wsgiref.handlers.CGIHandler().run(app)".  The best solution in
       this case is to change your app to add the import line "from
       google.appengine.ext.webapp import util" to the top your file
       and change the app invocation to "util.run_wsgi_app(app)".

     - Create a file named appengine_config.py to your app's root
       directory, and add the following lines to it:

	 def webapp_add_wsgi_middleware(app):
	   from appstats import recording
	   app = recording.appstats_wsgi_middleware(app)
	   return app

       (NOTE: for very subtle reasons, the import must be inside the
       function; otherwise the SDK dev_appserver's auto-module-reload
       feature won't work properly.)

(3) Add this to your app.yaml file (before /.* if you have it):

    - url: /stats.*
      script: appstats/ui.py

    (You don't need to add "login: admin" -- there is code that
    requires admin permissions when deployed, but not when running in
    the dev_appserver.  This is just how you want it.  Trust me.)

(4) Deploy and/or run your app like you normally do.  To review RPC
    statistics for the 1000 most recent requests, hit /stats/ and
    click around.  You must be logged in as an administrator or using
    the dev_appserver.

(5) To configure AppStats, you can add settings to appengine_config.py
    (which you may already have created in step (2b) above), e.g.

      appstats_MAX_STACK = 5
      appstats_MAX_LOCALS = 0

    A sample configuration file, documenting all configuration
    variables and their default values, is present as
    sample_appengine_config.py.  You can copy this file to
    appengine_config.py in your application's toplevel directory and
    edit it.  Do not edit the sample file in place; such changes will
    have no effect.  Do not forget the change in file name (dropping
    the 'sample_') and move it into your app directory.

(6) If your app is using Django 1.0 or newer, you probably have a
    clause like this in your main script:

      from google.appengine.dist import use_library
      use_library('django', '1.0')
      import django

    You should add the same clause to the appengine_config.py file.
    If you don't do this, you may get hard-to-reproduce errors
    complaining about the wrong Django version if the /stats URL is
    hit before any of your app's URLs are hit.  NOTE: the line
    "import django" is needed in appengine_config.py to make this work!
